###4ms 递归   dfs//

class Solution {
public:
     vector<string> res;
     unordered_map<string, string> table{{"0", ""},{"1", ""},
            {"2", "abc"},
            {"3","def"}, {"4","ghi"}, {"5","jkl"},
            {"6","mno"}, {"7","pqrs"},{"8","tuv"},
            {"9","wxyz"}};  
    
    void backtrack(string combination, string next_digits){
        if(next_digits.size()==0)
            res.push_back(combination);
        else{
            string digit = next_digits.substr(0,1);
            string letters=table[digit];
            for(int i=0;i<letters.size();i++){
                string letter=letters.substr(i,1);
                backtrack(combination+letter,next_digits.substr(1,next_digits.size()-1));
            }
        } 
    }
    vector<string> letterCombinations(string digits) {
            if(digits.size()!=0) 
                backtrack("",digits);
            return res;
    }
};


#自己撸的终极版本
class Solution {
public:
     vector<string> res;
     unordered_map<string, string> table{{"0", ""},{"1", ""},
            {"2", "abc"},
            {"3","def"}, {"4","ghi"}, {"5","jkl"},
            {"6","mno"}, {"7","pqrs"},{"8","tuv"},
            {"9","wxyz"}};  
 
    void dfs(string combination,string next_digits){
        if(next_digits.size()==0)
            res.push_back(combination);
        else{
            string letters = table[next_digits.substr(0,1)];
            for(int i=0;i<letters.size();i++){
                dfs(combination+letters[i],next_digits.substr(1,next_digits.size()-1));
            }
        }   
    }
 
    vector<string> letterCombinations(string digits) {
            if(digits.size()!=0) 
                dfs("",digits);
            return res;
    }
};