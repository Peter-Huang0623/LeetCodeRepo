//执行用时 : 60 ms, 在Combination Sum的C++提交中击败了38.12% 的用户
//内存消耗 : 11.6 MB, 在Combination Sum的C++提交中击败了54.67% 的用户

class Solution {
public:
    void dfs(vector<int>& candidates,int target,int start, vector<int> comb,vector<vector<int>> &res){
        if(target==0){
            res.push_back(comb);
            return;
        }
        if(target<candidates[start])
            return;
        for(int i=start;i<candidates.size();i++){
            comb.push_back(candidates[i]);
            dfs(candidates,target-candidates[i],i,comb,res);
            comb.pop_back(); //不对的时候回退清除错误路径
        }    
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<int> comb;
        vector<vector<int>> result;
        dfs(candidates,target,0,comb,result);
        return result;
    }
};